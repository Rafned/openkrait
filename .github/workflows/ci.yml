---
name: CI
on:
  - push
  - pull_request
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  smoke-k8s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Minikube and Kubernetes
        run: >
          curl -LO
          https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

          sudo install minikube-linux-amd64 /usr/local/bin/minikube


          # Запускаем Minikube с явным указанием профиля

          minikube start --driver=docker --profile=ci-test


          # Ждем полного запуска кластера

          minikube status -p ci-test

          minikube kubectl -p ci-test -- cluster-info


          # СОЗДАЕМ СИМЛИНК НА СТАНДАРТНОЕ МЕСТО KUBECONFIG

          # Minikube создает конфиг в ~/.minikube/profiles/ci-test/config.json

          mkdir -p ~/.kube

          minikube kubectl -p ci-test -- config view --flatten > ~/.kube/config

          chmod 600 ~/.kube/config


          # Проверяем, что конфиг создан и доступен

          ls -la ~/.kube/

          kubectl config view
      - name: Deploy vulnerable pod
        run: |
          # Создаем bad.yaml
          cat <<EOF > bad.yaml
          apiVersion: v1
          kind: Pod
          metadata:
            name: bad-pod
          spec:
            containers:
            - name: nginx
              image: nginx:1.14.2
              imagePullPolicy: IfNotPresent
          EOF

          kubectl apply -f bad.yaml

          # Ждем создания pod
          sleep 15
          kubectl get pods -o wide
          kubectl describe pod bad-pod
      - name: Build Docker image
        run: |
          docker build -t openkrait:test .
      - name: Test Kubernetes Scanner
        run: >+
          # ВАЖНОЕ ИСПРАВЛЕНИЕ: Правильное монтирование kubeconfig

          # Minikube в GitHub Actions использует Docker driver, поэтому нужен особый подход

          echo "Текущий kubeconfig:"

          kubectl config view


          echo "Содержимое .kube:"

          ls -la ~/.kube/


          echo "Содержимое .minikube:"

          ls -la ~/.minikube/


          # Запускаем сканер с правильным монтированием

          docker run --rm \
            -v $HOME/.kube:/root/.kube:ro \
            -v $HOME/.minikube:$HOME/.minikube:ro \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e K8S_IN_CLUSTER=false \
            openkrait:test openkrait scan-k8s
            
      - name: Verify scan results
        run: |
          output=$(docker run --rm \
            -v $HOME/.kube:/root/.kube:ro \
            -v $HOME/.minikube:$HOME/.minikube:ro \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e K8S_IN_CLUSTER=false \
            openkrait:test openkrait scan-k8s 2>&1)

          echo "Scan output:"
          echo "$output"

          if echo "$output" | grep -q "nginx:1\.14"; then
            echo "✅ Уязвимость обнаружена"
            exit 0
          else
            echo "❌ Уязвимость не обнаружена"
            echo "Возможные причины:"
            echo "1. Pod не создался"
            echo "2. Проблемы с подключением к API"
            echo "3. Сканер не видит образы"
            exit 1
          fi
      - name: Debug info
        if: failure()
        run: |
          echo "=== DEBUG INFORMATION ==="
          echo "KUBECONFIG: $KUBECONFIG"
          echo "Current kubeconfig:"
          kubectl config view
          echo "Pods:"
          kubectl get pods -A
          echo "Nodes:"
          kubectl get nodes
          echo "Minikube status:"
          minikube status -p ci-test
          echo "Docker images:"
          docker images
