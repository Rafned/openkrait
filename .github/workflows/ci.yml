---
name: CI
on:
  - push
  - pull_request
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  smoke-k8s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Docker and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io curl
      - name: Setup Minikube
        run: >
          # Устанавливаем Minikube

          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

          sudo install minikube-linux-amd64 /usr/local/bin/minikube


          # Запускаем Docker сервис

          sudo systemctl start docker

          sudo systemctl enable docker


          # Добавляем пользователя в группу docker

          sudo usermod -aG docker $USER

          newgrp docker


          # Запускаем Minikube с явным указанием driver

          minikube start --driver=docker --force


          # Ждем полного запуска

          echo "Ожидание запуска Minikube..."

          sleep 30


          # Проверяем статус

          minikube status


          # КОНФИГУРИРУЕМ KUBECTL ПРАВИЛЬНО

          minikube kubectl -- get nodes


          # Экспортируем конфиг

          mkdir -p ~/.kube

          minikube kubectl -- config view --flatten > ~/.kube/config

          chmod 600 ~/.kube/config


          # Устанавливаем контекст

          kubectl config use-context minikube


          # Проверяем подключение

          kubectl cluster-info

          kubectl get nodes
      - name: Deploy vulnerable pod
        run: |
          # ВАЖНО: Используем minikube kubectl для гарантии
          minikube kubectl -- create namespace test-ns

          cat <<EOF > bad.yaml
          apiVersion: v1
          kind: Pod
          metadata:
            name: bad-pod
            namespace: test-ns
          spec:
            containers:
            - name: nginx
              image: nginx:1.14.2
              imagePullPolicy: IfNotPresent
          EOF

          minikube kubectl -- apply -f bad.yaml --validate=false

          # Ждем создания pod
          echo "Ожидание создания pod..."
          sleep 20

          minikube kubectl -- get pods -n test-ns -o wide
          minikube kubectl -- describe pod bad-pod -n test-ns
      - name: Build Docker image
        run: |
          docker build -t openkrait:test .
      - name: Test Kubernetes Scanner
        run: |+
          echo "Проверка kubeconfig:"
          ls -la ~/.kube/
          kubectl config view

          # Запускаем сканер с правильным монтированием
          docker run --rm \
            -v $HOME/.kube:/root/.kube:ro \
            -v $HOME/.minikube:$HOME/.minikube:ro \
            openkrait:test openkrait scan-k8s
            
      - name: Verify scan results
        run: |
          output=$(docker run --rm \
            -v $HOME/.kube:/root/.kube:ro \
            -v $HOME/.minikube:$HOME/.minikube:ro \
            openkrait:test openkrait scan-k8s 2>&1)

          echo "Scan output:"
          echo "$output"

          if echo "$output" | grep -q "nginx:1\.14"; then
            echo "✅ Уязвимость обнаружена"
          else
            echo "❌ Уязвимость не обнаружена"
            exit 1
          fi
      - name: Cleanup
        if: always()
        run: |
          minikube stop
          minikube delete
